// Generated by Gemini 2.5 Pro

using ReimuYggdrasil.Core.Models;

namespace ReimuYggdrasil.Core.Entites;

public class JoinSessionData : IDisposable
{
    private readonly HashSet<JoinSessionInfo> _sessions = [];
    private readonly ReaderWriterLockSlim _lock = new(LockRecursionPolicy.NoRecursion);
    private readonly Timer _cleanupTimer;

    /// <summary>
    /// 初始化 JoinSessionManager 的新实例。
    /// </summary>
    /// <param name="cleanupInterval">清理过期会话的时间间隔。默认为10秒。</param>
    public JoinSessionData(TimeSpan? cleanupInterval = null)
    {
        _cleanupTimer = new Timer(
            callback: CleanupExpiredSessions,
            state: null,
            dueTime: TimeSpan.Zero,
            period: cleanupInterval ?? TimeSpan.FromSeconds(10)
        );
    }

    /// <summary>
    /// 添加一个新的会话记录。
    /// </summary>
    /// <param name="sessionInfo">要添加的会话信息。</param>
    public void Add(JoinSessionInfo sessionInfo)
    {
        _lock.EnterWriteLock();
        try
        {
            _sessions.Add(sessionInfo);
        }
        finally
        {
            _lock.ExitWriteLock();
        }
    }

    /// <summary>
    /// 根据 AccessToken 获取一个有效的会话记录。
    /// </summary>
    /// <param name="serverId">用于查找会话的 AccessToken。</param>
    /// <returns>如果找到且未过期，则返回 JoinSessionInfo 实例；否则返回 null。</returns>
    public JoinSessionInfo? Get(string serverId)
    {
        _lock.EnterReadLock();
        try
        {
            var session = _sessions.FirstOrDefault(s => s.ServerId == serverId);

            // 确认会话存在且未过期
            if (session != null && session.ExpiredAt > DateTime.Now)
            {
                return session;
            }

            return null;
        }
        finally
        {
            _lock.ExitReadLock();
        }
    }

    /// <summary>
    /// 清理已过期的会话。此方法由内部定时器自动调用。
    /// </summary>
    private void CleanupExpiredSessions(object? state)
    {
        _lock.EnterWriteLock();
        try
        {
            _sessions.RemoveWhere(s => s.ExpiredAt < DateTime.Now);
        }
        finally
        {
            _lock.ExitWriteLock();
        }
    }

    /// <summary>
    /// 释放由该实例占用的资源。
    /// </summary>
    public void Dispose()
    {
        _cleanupTimer.Dispose();
        _lock.Dispose();
        GC.SuppressFinalize(this);
    }
}
